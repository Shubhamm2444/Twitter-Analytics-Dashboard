import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
df = pd.read_excel("Tweet.xlsx")

# Convert time-related columns to datetime format
df["time"] = pd.to_datetime(df["time"])
df["weekday"] = df["time"].dt.weekday  # Monday = 0, Sunday = 6
df["hour"] = df["time"].dt.hour
df["date"] = df["time"].dt.day
df["char_count"] = df["Tweet"].astype(str).apply(len)
df["word_count"] = df["Tweet"].astype(str).apply(lambda x: len(x.split()))

### TASK 1: Top 10% Engagement Rate Tweets ###
df_task1 = df[(df["likes"] > 50) & (df["weekday"] < 5) & (df["hour"].between(15, 17)) & (df["char_count"] < 30)]
top_10_percent = df_task1["engagement rate"].quantile(0.9)
df_task1 = df_task1[df_task1["engagement rate"] >= top_10_percent]
plt.figure(figsize=(10, 5))
plt.barh(df_task1["Tweet"], df_task1["engagement rate"], color="blue")
plt.xlabel("Engagement Rate")
plt.ylabel("Tweets")
plt.title("Top 10% Engagement Rate Tweets")
plt.gca().invert_yaxis()
plt.show()

### TASK 2: Pie Chart - Proportion of Clicks ###
df_task2 = df[df["impressions"] > 500]
clicks_data = df_task2[["url clicks", "profile clicks", "hashtag clicks"]].sum()
plt.figure(figsize=(7, 7))
plt.pie(clicks_data, labels=clicks_data.index, autopct="%1.1f%%", colors=["blue", "green", "red"], startangle=140)
plt.title("Proportion of Total Clicks")
plt.show()

### TASK 3: Clustered Bar Chart - Clicks by Tweet Category ###
df_task3 = df[(df["hour"].between(15, 17)) & (df["date"] % 2 == 0) & (df["word_count"] > 40)]
df_task3_grouped = df_task3.groupby("category")["url clicks", "profile clicks", "hashtag clicks"].sum()
df_task3_grouped.plot(kind="bar", figsize=(10, 6), stacked=False)
plt.title("Clicks by Tweet Category")
plt.ylabel("Click Count")
plt.xlabel("Tweet Category")
plt.legend()
plt.show()

### TASK 4: Scatter Plot - Media Engagements vs. Views ###
df_task4 = df[(df["replies"] > 10) & (df["hour"].between(18, 23)) & (df["date"] % 2 != 0) & (df["word_count"] > 50)]
plt.figure(figsize=(8, 5))
sns.scatterplot(x=df_task4["media views"], y=df_task4["media engagements"], hue=df_task4["engagement rate"] > 5, palette=["blue", "red"])
plt.xlabel("Media Views")
plt.ylabel("Media Engagements")
plt.title("Media Engagements vs. Views")
plt.show()

### TASK 5: Top 10 Tweets by Retweets + Likes ###
df_task5 = df[(df["weekday"] < 5) & (df["hour"].between(15, 17)) & (df["impressions"] % 2 == 0) & (df["date"] % 2 != 0) & (df["word_count"] < 30)]
df_task5["total"] = df_task5["retweets"] + df_task5["likes"]
df_task5 = df_task5.nlargest(10, "total")
df_task5.plot(kind="bar", x="Tweet", y="total", figsize=(10, 5), color="purple")
plt.title("Top 10 Tweets by Retweets + Likes")
plt.ylabel("Total Interactions")
plt.show()

### TASK 6: Engagements for High Media Views ###
df_task6 = df[(df["media engagements"] > df["media engagements"].median()) & (df["date"] % 2 != 0) & (df["media views"] % 2 == 0) & (df["char_count"] > 20)]
df_task6.plot(kind="bar", x="Tweet", y=["replies", "retweets", "likes"], figsize=(10, 6), stacked=True)
plt.title("Comparison of Engagements for High Media Views")
plt.ylabel("Count")
plt.show()

### TASK 7: Engagement Rate with/without App Opens ###
df_task7 = df[(df["hour"].between(7, 11)) & (df["impressions"] % 2 == 0) & (df["date"] % 2 != 0) & (df["char_count"] > 30)]
df_task7_grouped = df_task7.groupby("has_app_opens")["engagement rate"].mean()
df_task7_grouped.plot(kind="bar", color=["orange", "blue"], figsize=(7, 5))
plt.title("Engagement Rate: App Opens vs. No App Opens")
plt.ylabel("Average Engagement Rate")
plt.show()

### TASK 8: Dual-Axis Chart - Media Views vs. Engagements ###
df_task8 = df[(df["time"].dt.quarter == 4) & (df["hour"].between(7, 11)) & (df["impressions"] % 2 == 0) & (df["date"] % 2 != 0) & (df["char_count"] > 30)]
df_task8_grouped = df_task8.groupby("weekday")["media views", "media engagements"].sum()
df_task8_grouped.plot(kind="bar", figsize=(10, 6))
plt.title("Media Views & Engagements by Day of Week")
plt.show()

### TASK 9: Line Chart - Engagement Rate Trend ###
df_task9 = df[(df["hour"].between(7, 11)) & (df["engagement rate"] % 2 == 0) & (df["date"] % 2 != 0) & (df["char_count"] > 20)]
df_task9_grouped = df_task9.groupby(df_task9["time"].dt.month)["engagement rate"].mean()
df_task9_grouped.plot(kind="line", marker="o", figsize=(10, 6))
plt.title("Trend of Engagement Rate Over Months")
plt.ylabel("Avg. Engagement Rate")
plt.show()
